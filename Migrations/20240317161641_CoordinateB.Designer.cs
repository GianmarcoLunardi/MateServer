// <auto-generated />
using System;
using MakeSense.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MakeSense.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240317161641_CoordinateB")]
    partial class CoordinateB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MakeSense.Models.Annotation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Area")
                        .HasColumnType("real");

                    b.Property<long?>("InfoId")
                        .HasColumnType("bigint");

                    b.Property<long>("category_id")
                        .HasColumnType("bigint");

                    b.Property<long>("image_id")
                        .HasColumnType("bigint");

                    b.Property<bool>("iscrowd")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("InfoId");

                    b.ToTable("Annotations");
                });

            modelBuilder.Entity("MakeSense.Models.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("InfoId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InfoId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MakeSense.Models.Coordinate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AnnotationId")
                        .HasColumnType("bigint");

                    b.Property<float>("Point")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AnnotationId");

                    b.ToTable("Coordinates");
                });

            modelBuilder.Entity("MakeSense.Models.CoordinateB", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AnnotationId")
                        .HasColumnType("bigint");

                    b.Property<float>("Point")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AnnotationId");

                    b.ToTable("CoordinateB");
                });

            modelBuilder.Entity("MakeSense.Models.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("File_Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("File Name");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<long?>("InfoId")
                        .HasColumnType("bigint");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InfoId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("MakeSense.Models.Info", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Infos");
                });

            modelBuilder.Entity("MakeSense.Models.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2")
                        .HasColumnName("Data");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("MakeSense.Models.Segmentation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Segmentations");
                });

            modelBuilder.Entity("MakeSense.Models.Annotation", b =>
                {
                    b.HasOne("MakeSense.Models.Info", null)
                        .WithMany("Annotations")
                        .HasForeignKey("InfoId");
                });

            modelBuilder.Entity("MakeSense.Models.Category", b =>
                {
                    b.HasOne("MakeSense.Models.Info", null)
                        .WithMany("Categories")
                        .HasForeignKey("InfoId");
                });

            modelBuilder.Entity("MakeSense.Models.Coordinate", b =>
                {
                    b.HasOne("MakeSense.Models.Annotation", null)
                        .WithMany("Segmentations")
                        .HasForeignKey("AnnotationId");
                });

            modelBuilder.Entity("MakeSense.Models.CoordinateB", b =>
                {
                    b.HasOne("MakeSense.Models.Annotation", null)
                        .WithMany("Bbox")
                        .HasForeignKey("AnnotationId");
                });

            modelBuilder.Entity("MakeSense.Models.Image", b =>
                {
                    b.HasOne("MakeSense.Models.Info", null)
                        .WithMany("Images")
                        .HasForeignKey("InfoId");
                });

            modelBuilder.Entity("MakeSense.Models.Annotation", b =>
                {
                    b.Navigation("Bbox");

                    b.Navigation("Segmentations");
                });

            modelBuilder.Entity("MakeSense.Models.Info", b =>
                {
                    b.Navigation("Annotations");

                    b.Navigation("Categories");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
