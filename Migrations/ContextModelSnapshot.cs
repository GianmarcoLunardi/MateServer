// <auto-generated />
using System;
using MakeSense.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MakeSense.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MakeSense.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DonationBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DonationOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("File_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Format")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lens")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PixelX")
                        .HasColumnType("int");

                    b.Property<int?>("PixelY")
                        .HasColumnType("int");

                    b.Property<long?>("RootId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid?>("User")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RootId");

                    b.HasIndex("User");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("MakeSense.Models.Label", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Highth")
                        .HasColumnType("int");

                    b.Property<Guid>("IdImage")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LabelImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdImage")
                        .IsUnique();

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("MakeSense.Models.Registry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Operation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistratedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Registries");
                });

            modelBuilder.Entity("MakeSense.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MakeSense.Models.Root", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("roots");
                });

            modelBuilder.Entity("MakeSense.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobSection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("city")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("MakeSense.Models.Image", b =>
                {
                    b.HasOne("MakeSense.Models.Root", null)
                        .WithMany("images")
                        .HasForeignKey("RootId");

                    b.HasOne("MakeSense.Models.User", "ApprovedBy")
                        .WithMany("ImagesAproved")
                        .HasForeignKey("User");

                    b.Navigation("ApprovedBy");
                });

            modelBuilder.Entity("MakeSense.Models.Label", b =>
                {
                    b.HasOne("MakeSense.Models.Image", "Image")
                        .WithOne("Label")
                        .HasForeignKey("MakeSense.Models.Label", "IdImage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("MakeSense.Models.Registry", b =>
                {
                    b.HasOne("MakeSense.Models.Image", "Image")
                        .WithMany("Registries")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("MakeSense.Models.User", b =>
                {
                    b.HasOne("MakeSense.Models.Role", null)
                        .WithMany("User")
                        .HasForeignKey("RoleId");

                    b.HasOne("MakeSense.Models.User", null)
                        .WithMany("ApprovedBy")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MakeSense.Models.Image", b =>
                {
                    b.Navigation("Label");

                    b.Navigation("Registries");
                });

            modelBuilder.Entity("MakeSense.Models.Role", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeSense.Models.Root", b =>
                {
                    b.Navigation("images");
                });

            modelBuilder.Entity("MakeSense.Models.User", b =>
                {
                    b.Navigation("ApprovedBy");

                    b.Navigation("ImagesAproved");
                });
#pragma warning restore 612, 618
        }
    }
}
